
use sakila;
-- List the number of films per category.
select category_id, count(film_id) from film_category group by category_id;
-- Retrieve the store ID, city, and country for each store.
select s.store_id, c.city, country.country from store as s
join address as a on s.address_id = a.address_id
join city as c on a.city_id = c.city_id
join country  on c.country_id = country.country_id;
-- Calculate the total revenue generated by each store in dollars.
select s.store_id, sum(p.amount) from store as s
join staff as st on s.store_id = st.store_id
join payment as p on st.staff_id = p.staff_id
group by store_id;

-- Determine the average running time of films for each category.
select category_id, avg(length) from film_category as fc
join film as f on fc.film_id = f.film_id
group by category_id;
-- Identify the film categories with the longest average running time.
select category_id, avg(length) from film_category as fc
join film as f on fc.film_id = f.film_id
group by category_id
order by avg(length) desc
limit 3;

-- Display the top 10 most frequently rented movies in descending order.
select title, count(p.rental_id) from film as f
join inventory as i on f.film_id = i.film_id
join rental as r on i.inventory_id = r.inventory_id
join payment as p on r.rental_id = p.rental_id
group by f.film_id
order by count(p.rental_id) desc;
-- Determine if "Academy Dinosaur" can be rented from Store 1.
select * from inventory;
select title, i.film_id, store_id from inventory as i 
join film as f on i.film_id = f.film_id 
group by title, i.film_id, store_id
having i.film_id = 1 and store_id = 1;

-- Provide a list of all distinct film titles, along with their availability status in the inventory. 

select f.title, case 
when group_concat(i.inventory_id) is null then "unavailable"
else "available"
end as "availability status"
from film as f
left join inventory as i on f.film_id = i.film_id
group by f.title;

-- Include a column indicating whether each title is 'Available' or 'NOT available.' 
-- Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

select title, case 
when group_concat(r.return_date)is null then "not available"
else "available" 
end as "availability status"
from film as f 
left join inventory as i on f.film_id = i.film_id
left join rental as r on i.inventory_id = r.inventory_id 
group by f.title;



-- Tip 1: This lab involves joins with multiple tables, which can be challenging. Take your time and follow the steps we discussed in class:

-- Make sure you understand the relationships between the tables in the database. This will help you determine which tables to join and which columns to use in your joins.
-- Identify a common column for both tables to use in the ON section of the join. If there isn't a common column, you may need to add another table with a common column.
-- Decide which table you want to use as the left table (immediately after FROM) and which will be the right table (immediately after JOIN).
-- Determine which table you want to include all records from. This will help you decide which type of JOIN to use. 
-- If you want all records from the first table, use a LEFT JOIN. If you want all records from the second table, use a RIGHT JOIN. If you want records from both tables only where there is a match, use an INNER JOIN.
-- Use table aliases to make your queries easier to read and understand. This is especially important when working with multiple tables.
-- Write the query
-- Tip 2: Break down the problem into smaller, more manageable parts. For example, you might start by writing a query to retrieve data from just two tables before adding additional tables to the join. Test your queries as you go, and check the output carefully to make sure it matches what you expect. This process takes time, so be patient and go step by step to build your query incrementally.





select * from rental
where month(rental_date) = 07 and year(rental_date) = 2005;

SELECT * FROM rental WHERE month(rental_date) = 7 AND year(rental_date) = 2005 ;









